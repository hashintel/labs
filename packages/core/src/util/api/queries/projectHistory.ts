import { APIExperimentRun } from "../../types";
import {
  CommitGroup,
  ProjectHistoryItemType,
  ProjectHistoryQueryVariables,
  ProjectHistoryReturn,
} from "../types";
import {
  LinkableProject,
  ReleaseDescription,
} from "../../../features/project/types";
import { query } from "../query";

/**
 * This type mapping is necessary because we use APIExperimentRun instead of
 * the autogenerated experiment run type elsewhere in the project
 *
 * @todo remove this
 */

export type ProjectHistoryItemItem =
  | ReleaseDescription
  | CommitGroup
  | APIExperimentRun;

interface ProjectHistoryItemShared {
  createdAt: string;
}

export type ProjectHistoryItemExperimentRun = ProjectHistoryItemShared & {
  itemType: ProjectHistoryItemType.ExperimentRun;
  item: APIExperimentRun;
};

export type ProjectHistoryItemRelease = ProjectHistoryItemShared & {
  itemType: ProjectHistoryItemType.Release;
  item: ReleaseDescription;
};

export type ProjectHistoryItemCommitGroup = ProjectHistoryItemShared & {
  itemType: ProjectHistoryItemType.CommitGroup;
  item: CommitGroup;
};

export type ProjectHistoryItem =
  | ProjectHistoryItemExperimentRun
  | ProjectHistoryItemRelease
  | ProjectHistoryItemCommitGroup;

export type ProjectHistoryReturnWithCustomItem = Omit<
  ProjectHistoryReturn,
  "items"
> & {
  items: ProjectHistoryItem[];
};

const queryString = /* GraphQL */ `
  query projectHistory(
    $pathWithNamespace: String!
    $ref: String!
    $pageToCurrent: Boolean!
    $accessCode: String
    $createdBefore: Date
  ) {
    project(
      projectPath: $pathWithNamespace
      ref: $ref
      accessCode: $accessCode
    ) {
      history(createdBefore: $createdBefore, pageToCurrent: $pageToCurrent) {
        next
        remaining
        receivedCurrent
        items {
          itemType
          createdAt
          item {
            __typename

            ... on CommitGroup {
              commits {
                id
                message
                createdAt
              }
            }
            ... on ReleaseBasic {
              tag
              createdAt
            }
            ... on ExperimentRun {
              id
              name
              experimentSrc
              createdAt
              packageData {
                metricName
                metricObjective
              }
              simulationRuns {
                id
                stepsLink
                analysisLink
                propertyValues
                metricOutcome
              }
            }
          }
        }
      }
    }
  }
`;

export const projectHistory = async (
  project: LinkableProject,
  pageToCurrent: boolean,
  createdBefore?: string | null,
  accessCode?: string,
  signal?: AbortSignal,
) =>
  (
    await query<
      // @todo use ProjectHistoryQuery when not needing to map types
      { project: { history: ProjectHistoryReturnWithCustomItem } },
      ProjectHistoryQueryVariables
    >(
      queryString,
      {
        pathWithNamespace: project.pathWithNamespace,
        ref: project.ref ?? "main",
        accessCode,
        createdBefore,
        pageToCurrent,
      },
      signal,
    )
  ).project.history;
