import {
  LocalStorageProject,
  ProjectVisibility,
  SimulationProjectWithHcFiles,
} from "../../../../features/project/types";

// Migration shim.
// This is meant to be stored as a template project that we can fork from.
// We can bring that back once github integration is online.
// In the meantime, we store it inline as a blob of json.
// (to update, import the project and copy the json to here.)
const EMPTY_PROJECT_JSON =
  '{"id":"empty-project","name":"empty-project","description":"","image":null,"thumbnail":null,"createdAt":"2023-10-21T00:38:19.622Z","updatedAt":"2023-10-21T00:38:19.622Z","canUserEdit":true,"pathWithNamespace":"@imported/empty-project","namespace":"@imported","type":"Simulation","ref":"main","visibility":"public","ownerType":"User","forkOf":null,"latestRelease":null,"license":{"id":"5dc3da73cc0cf804dcc66a51","name":"MIT License"},"keywords":[],"config":{"files":["README.md","src/globals.json","views/analysis.json","dependencies.json","experiments.json","src/init.json","src/behaviors/custom.js"],"keywords":[],"type":"Simulation"},"access":null,"actions":[],"files":[{"id":"description","path":{"root":"","dir":"","ext":".md","name":"README","base":"README.md","formatted":"README.md"},"repoPath":"README.md","contents":"This is a new simulation - it\'s an empty scaffold to build from.\\n\\n## Create agents for the simulation:\\n\\nDefine initial agents in init.json by adding objects to the array\\n  Ex. ```[{“position”:[0,0], “behaviors”: [‘custom.js’’}]```\\nOR convert init.json to a JavaScript or Python file by right clicking on init.json and return an array of agents\\nAgents will run each of their behaviors on each step of the simulation\\n\\n## Add behaviors to the agents\\n\\nCreate new behavior files by clicking the new file indicator in the top left panel.\\nSelect python or javascript.\\nAttach the behaviors to the agent by adding them to the agents behavior array\\n  Ex. ```[{“position”:[0,0], “behaviors”: [‘custom.js’’}]```\\nBehaviors can access and modify the agent state\\nThey can allow the agent to view other agents with neighbors: Neighbors = context.neighbors()\\nOr allow agents to interact by sending messages state.addMessage(...)\\n\\n## Run the simulation\\n\\nClick the Play button or the Step Simulation button in the bottom right under the viewer\\nIf you’ve defined a position on the agent, you’ll see the agent appear in the 3d viewer\\nClick reset to reset the simulation to the initial state.\\n","kind":"Required"},{"id":"properties","path":{"root":"","dir":"","ext":".json","name":"globals","base":"globals.json","formatted":"globals.json"},"repoPath":"src/globals.json","contents":"{}","kind":"Required"},{"id":"analysis","path":{"root":"","dir":"","ext":".json","name":"analysis","base":"analysis.json","formatted":"analysis.json"},"repoPath":"views/analysis.json","contents":"{\\n  \\"outputs\\": {}, \\n  \\"plots\\": []\\n}","kind":"Required"},{"id":"dependencies","path":{"root":"","dir":"","ext":".json","name":"dependencies","base":"dependencies.json","formatted":"dependencies.json"},"repoPath":"dependencies.json","contents":"{}","kind":"Required"},{"id":"experiments","path":{"root":"","dir":"","ext":".json","name":"experiments","base":"experiments.json","formatted":"experiments.json"},"repoPath":"experiments.json","contents":"{}","kind":"Required"},{"id":"initialState","path":{"root":"","dir":"","ext":".json","name":"init","base":"init.json","formatted":"init.json"},"repoPath":"src/init.json","contents":"[]","kind":"Init"},{"id":"custom_js_1_0","path":{"root":"","dir":"","ext":".js","name":"custom","base":"custom.js","formatted":"custom.js"},"repoPath":"src/behaviors/custom.js","contents":"/**\\n * @param {AgentState} state of the agent\\n * @param {AgentContext} context of the agent\\n */\\nconst behavior = (state, context) => {\\n\\n};\\n","kind":"Behavior","keys":{"keys":{"uuid":"e197580e-7a90-4056-bec4-e803601f9ae9","meta":{"nullable":false,"type":"struct"},"key":"fields","rows":[],"version":"2"},"built_in_key_use":null,"dynamic_access":false,"_trackCreation":false}}]}';

const STARTER_PROJECT_JSON = `{"id":"empty-template-project","name":"empty-template-project","description":"","image":null,"thumbnail":null,"createdAt":"2023-10-21T00:35:27.289Z","updatedAt":"2023-10-21T00:35:27.289Z","canUserEdit":true,"pathWithNamespace":"@imported/empty-template-project","namespace":"@imported","type":"Simulation","ref":"main","visibility":"public","ownerType":"User","forkOf":null,"latestRelease":null,"license":{"id":"5dc3da73cc0cf804dcc66a51","name":"MIT License"},"keywords":[],"config":{"files":["README.md","src/globals.json","views/analysis.json","dependencies.json","experiments.json","src/init.json","src/behaviors/new_behavior.js","dependencies/@hash/create-agents/src/behaviors/create_agents.js","dependencies/@hash/create-scatters/src/behaviors/create_scatters.js","dependencies/@hash/random-movement/src/behaviors/random_movement.rs","dependencies/@hash/remove-self/src/behaviors/remove_self.js"],"keywords":[],"type":"Simulation"},"access":null,"actions":[],"files":[{"id":"description","path":{"root":"","dir":"","ext":".md","name":"README","base":"README.md","formatted":"README.md"},"repoPath":"README.md","contents":"This starter template shows how to use basic features of HASH.\\nIt should provide direction in using common patterns and tools on the platform.\\n","kind":"Required"},{"id":"properties","path":{"root":"","dir":"","ext":".json","name":"globals","base":"globals.json","formatted":"globals.json"},"repoPath":"src/globals.json","contents":"{\\n  \\"topology\\": {\\n    \\"x_bounds\\": [0, 10],\\n    \\"y_bounds\\": [0, 10]\\n  },\\n  \\"max_height\\": 10\\n}","kind":"Required"},{"id":"analysis","path":{"root":"","dir":"","ext":".json","name":"analysis","base":"analysis.json","formatted":"analysis.json"},"repoPath":"views/analysis.json","contents":"{\\n  \\"outputs\\": {}, \\n  \\"plots\\": []\\n}","kind":"Required"},{"id":"dependencies","path":{"root":"","dir":"","ext":".json","name":"dependencies","base":"dependencies.json","formatted":"dependencies.json"},"repoPath":"dependencies.json","contents":"{\\n  \\"@hash/create-agents/create_agents.js\\": \\"2.1.1\\",\\n  \\"@hash/create-scatters/create_scatters.js\\": \\"3.1.1\\",\\n  \\"@hash/random-movement/random_movement.rs\\": \\"1.0.0\\",\\n  \\"@hash/remove-self/remove_self.js\\": \\"2.1.0\\"\\n}","kind":"Required"},{"id":"experiments","path":{"root":"","dir":"","ext":".json","name":"experiments","base":"experiments.json","formatted":"experiments.json"},"repoPath":"experiments.json","contents":"{}","kind":"Required"},{"id":"initialState","path":{"root":"","dir":"","ext":".json","name":"init","base":"init.json","formatted":"init.json"},"repoPath":"src/init.json","contents":"[\\n  {\\n    \\"position\\": [0, 0],\\n    \\"color\\": \\"blue\\",\\n    \\"height\\": 1,\\n    \\"behaviors\\": [\\"new_behavior.js\\"]\\n  },\\n  {\\n    \\"name\\": \\"creator\\",\\n    \\"behaviors\\": [\\n      \\"@hash/create-scatters/create_scatters.js\\",\\n      \\"@hash/create-agents/create_agents.js\\",\\n      \\"@hash/remove-self/remove_self.js\\"\\n    ],\\n    \\"scatter_templates\\": [\\n      {\\n        \\"template_name\\": \\"randomly_moving\\",\\n        \\"template_count\\": 10,\\n        \\"color\\": \\"green\\",\\n        \\"height\\": 1,\\n        \\"behaviors\\": [\\"@hash/random-movement/random_movement.rs\\"]\\n      }\\n    ]\\n  }\\n]","kind":"Init"},{"id":"create__agents_js_1_0","path":{"root":"","dir":"","ext":".js","name":"create_agents","base":"create_agents.js","formatted":"create_agents.js"},"repoPath":"dependencies/@hash/create-agents/src/behaviors/create_agents.js","contents":"/**\\n * This behavior generates all the agents that have been defined by other behaviors.\\n * \\n * agents {<agent type>: [agent definitions]} - stores lists of agent definitions\\n */\\nfunction behavior(state, context) {\\n  let messages = state.get(\\"messages\\");\\n  const agents = state.get(\\"agents\\");\\n\\n  for (agent_name in agents) {\\n    const agent_list = agents[agent_name];\\n\\n    for (agent of agent_list) {\\n      messages.push({\\n        \\"to\\": \\"hash\\", \\n        \\"type\\": \\"create_agent\\",\\n        \\"data\\": agent\\n      })\\n    }\\n  }\\n\\n  state.set(\\"messages\\", messages)\\n}","kind":"Behavior","keys":{"keys":{"uuid":"8d0e8a17-617d-4179-8e4d-3a955e339c81","meta":{"nullable":false,"type":"struct"},"key":"fields","rows":[["agents",{"uuid":"bf465ce0-7da6-4df7-bca1-415dab5ded99","meta":{"type":"any","nullable":true},"key":"scalar"}]],"version":"2"},"built_in_key_use":null,"_trackCreation":false}},{"id":"create__scatters_js_1_0","path":{"root":"","dir":"","ext":".js","name":"create_scatters","base":"create_scatters.js","formatted":"create_scatters.js"},"repoPath":"dependencies/@hash/create-scatters/src/behaviors/create_scatters.js","contents":"/**\\n * This behavior creates agents with random placements based an the defined templates in the creator agent.\\n * \\n * scatter_templates [{\\n *   \\"template_name\\": name,\\n *   \\"template_count\\": count,\\n *   ...other properties\\n * }] - stores sets of unique properties that will be added to each type of agent.\\n */\\nfunction behavior(state, context) {\\n  const { x_bounds, y_bounds } = context.globals()[\\"topology\\"];\\n\\n  const width = x_bounds[1] - x_bounds[0];\\n  const height = y_bounds[1] - y_bounds[0];\\n\\n  const scatter_templates = state.get(\\"scatter_templates\\");\\n  let agents = state.get(\\"agents\\")\\n  // Make sure to not overwrite existing agents\\n  agents = agents ? agents : {};\\n\\n  // Create scatter for each defined template\\n  for (template of scatter_templates) { //scatter_templates.forEach(template => {\\n    const name = template[\\"template_name\\"];\\n    const count = template[\\"template_count\\"];\\n\\n    // Store agents in an array in the creator agent\\n    agents[name] = [...Array(count)].map(_ => {\\n        // Choose random position within topology\\n        const x = Math.floor(Math.random() * width) + x_bounds[0];\\n        const y = Math.floor(Math.random() * height) + y_bounds[0];\\n        \\n        let agent = {\\n          ...template,\\n          position: [x, y]\\n        };\\n\\n        delete agent.template_name;\\n        delete agent.template_count;\\n        return agent;\\n      })\\n    };\\n\\n  state.set(\\"agents\\", agents);\\n}","kind":"Behavior","keys":{"keys":{"uuid":"7a83585e-04ad-48ce-bc24-ba5da50357af","meta":{"nullable":false,"type":"struct"},"key":"fields","rows":[["scatter_templates",{"uuid":"f06985c8-27f9-444b-8b96-8f1a785c4434","meta":{"type":"any","nullable":false},"key":"scalar"}],["agents",{"uuid":"96ec0a89-cf35-4db7-9ab0-bb8ccadaac5b","meta":{"type":"any","nullable":true},"key":"scalar"}]],"version":"2"},"built_in_key_use":null,"_trackCreation":false}},{"id":"new__behavior_js_1_0","path":{"root":"","dir":"","ext":".js","name":"new_behavior","base":"new_behavior.js","formatted":"new_behavior.js"},"repoPath":"src/behaviors/new_behavior.js","contents":"/**\\n * Write a brief description of your behavior here.\\n * \\n * This behavior will cause an agent to increase its height each step\\n * until it reaches the max_height defined in globals.json\\n */\\nconst behavior = (state, context) => {\\n  // You can access agent properties by using state.get()\\n  let height = state.get(\\"height\\");\\n  \\n  if (height < context.globals()[\\"max_height\\"]) {\\n    height += 1;\\n  }\\n\\n  // You can set agent properties using state.set()\\n  state.set(\\"height\\", height);\\n};","kind":"Behavior","keys":{"keys":{"uuid":"658833c5-908d-482b-a93e-b57ab3aed041","meta":{"nullable":false,"type":"struct"},"key":"fields","rows":[],"version":"2"},"built_in_key_use":null,"dynamic_access":false,"_trackCreation":false}},{"id":"random__movement_rs_1_0","path":{"root":"","dir":"","ext":".rs","name":"random_movement","base":"random_movement.rs","formatted":"random_movement.rs"},"repoPath":"dependencies/@hash/random-movement/src/behaviors/random_movement.rs","contents":"use crate::{\\n    behaviors::get_state_or_property,\\n    prelude::{AgentState, Context, SimulationResult},\\n};\\nuse rand::Rng;\\n\\npub fn random_movement(mut state: AgentState, context: &Context) -> SimulationResult<AgentState> {\\n    // If min and/or max neighbors are defined, move until our neighbor count is within those bounds.\\n    // if one or the other is undefined, it's open-ended.\\n    let neighbor_count = context.neighbors.len() as i64;\\n    let min_neighbors: i64 =\\n        get_state_or_property(&state, &context, \\"random_movement_seek_min_neighbors\\", -1);\\n\\n    let max_neighbors: i64 =\\n        get_state_or_property(&state, &context, \\"random_movement_seek_max_neighbors\\", -1);\\n\\n    fn get_satisfaction(neighbor_count: i64, min_neighbors: i64, max_neighbors: i64) -> bool {\\n        let min_satisfied = neighbor_count >= min_neighbors;\\n        let min_defined = min_neighbors >= 0;\\n        let max_satisfied = neighbor_count <= max_neighbors;\\n        let max_defined = max_neighbors >= 0;\\n\\n        // Both defined; both need to be satisfied.\\n        if min_defined && max_defined {\\n            return min_satisfied && max_satisfied;\\n        }\\n\\n        // only min defined? only need to satisfy it.\\n        if min_defined {\\n            return min_satisfied;\\n        }\\n\\n        // only max defined? only need to satisfy it.\\n        if max_defined {\\n            return max_satisfied;\\n        }\\n\\n        // No checks defined; can't get no satisfaction.\\n        false\\n    }\\n\\n    if get_satisfaction(neighbor_count, min_neighbors, max_neighbors) {\\n        // Our neighbor metrics are satisfied, no need to move.\\n        return Ok(state);\\n    }\\n\\n    let step_size: f64 = get_state_or_property(&state, &context, \\"random_movement_step_size\\", 1.0);\\n\\n    // Take a step forward, backwards, or nowhere by step_size.\\n    fn step(step_size: f64) -> f64 {\\n        let mod3 = rand::thread_rng().gen::<u8>() % 3;\\n        if mod3 == 0 {\\n            step_size\\n        } else if mod3 == 1 {\\n            -step_size\\n        } else {\\n            0.0\\n        }\\n    }\\n\\n    let pos = state.get_pos_mut()?;\\n    pos[\\"x\\"] += step(step_size);\\n    pos[\\"y\\"] += step(step_size);\\n\\n    Ok(state)\\n}\\n","kind":"Behavior","keys":{"keys":{"uuid":"342969f1-d497-4429-b86f-e4baf170f436","meta":{"nullable":false,"type":"struct"},"key":"fields","rows":[["random_movement_step_size",{"uuid":"f7a96d22-a511-4854-aa2f-2d2ef884092f","meta":{"type":"number","nullable":true},"key":"scalar"}],["random_movement_seek_min_neighbors",{"uuid":"4e7d5caa-01dd-4421-954c-263155c990e6","meta":{"type":"number","nullable":true},"key":"scalar"}],["random_movement_seek_max_neighbors",{"uuid":"d116258f-4143-4db0-bd77-70a148321388","meta":{"type":"number","nullable":true},"key":"scalar"}]],"version":"2"},"built_in_key_use":{"selected":["position"]},"_trackCreation":false}},{"id":"remove__self_js_1_0","path":{"root":"","dir":"","ext":".js","name":"remove_self","base":"remove_self.js","formatted":"remove_self.js"},"repoPath":"dependencies/@hash/remove-self/src/behaviors/remove_self.js","contents":"/**\\n * This behavior removes its agent from the simulation\\n * after one time step.\\n */\\nfunction behavior(state, context) {\\n  // Not specifying an agent_id automatically causes the\\n  // sender to be the target of the remove action\\n  state.addMessage(\\"HASH\\", \\"remove_agent\\");\\n}","kind":"Behavior","keys":{"keys":{"uuid":"3b99a97f-03df-4d25-9d34-37296626bd57","meta":{"nullable":false,"type":"struct"},"key":"fields","rows":[],"version":"2"},"built_in_key_use":null,"_trackCreation":false}}]}`;

const templates: Record<string, LocalStorageProject> = {
  empty: JSON.parse(EMPTY_PROJECT_JSON),
  starter: JSON.parse(STARTER_PROJECT_JSON),
};

export const createNewSimulationProjectFromTemplate = (
  namespace: string,
  path: string,
  name: string,
  visibility: ProjectVisibility,
  template: string,
): SimulationProjectWithHcFiles => {
  if (!(namespace && path && name)) {
    throw Error(
      "Namespace, path, and name must be specified when creating a project.",
    );
  }

  const templateProject = templates[template];
  if (!templateProject) {
    throw new Error(`Unrecognized template ${template}`);
  }
  const project: SimulationProjectWithHcFiles = {
    ...templateProject,
    id: path,
    name,
    pathWithNamespace: `${namespace}/${path}`,
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
    namespace,
    visibility: visibility,
    access: null,
  };

  return project;
};
